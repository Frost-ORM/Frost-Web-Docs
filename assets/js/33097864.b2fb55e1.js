"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[1832],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8574:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1},i="Read Data Once",s={unversionedId:"docs/operations/read/once",id:"version-1.0.3/docs/operations/read/once",title:"Read Data Once",description:"Include",source:"@site/versioned_docs/version-1.0.3/docs/operations/read/once.md",sourceDirName:"docs/operations/read",slug:"/docs/operations/read/once",permalink:"/frost-web-docs/1.0.3/docs/operations/read/once",draft:!1,tags:[],version:"1.0.3",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Read",permalink:"/frost-web-docs/1.0.3/category/read"},next:{title:"Listen to changes",permalink:"/frost-web-docs/1.0.3/docs/operations/read/listen-to-changes"}},l={},p=[{value:"Include",id:"include",level:2},{value:"Fetch One",id:"fetch-one",level:2},{value:"Query Multiple",id:"query-multiple",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"read-data-once"},"Read Data Once"),(0,a.kt)("h2",{id:"include"},"Include"),(0,a.kt)("p",null,"Since Frost Focuses on simplifying the relations, it provides the option to fetch related instances along with the instance you originally want to fetch.\nThis were the ",(0,a.kt)("a",{parentName:"p",href:"../../../api/types/Include"},"Include")," Parameter comes in."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"../../../api/types/Include"},"Include")," Parameter is an array of the properties names (with ",(0,a.kt)("a",{parentName:"p",href:"../../../api/decorators/Relation"},"Relation")," decorator) that you want to fetch."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// for example when fetching a user with it\'s profile and posts the Include array would be\n["profile","posts"]\n\n')),(0,a.kt)("h2",{id:"fetch-one"},"Fetch One"),(0,a.kt)("p",null,"To Fetch a single instance:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the instance ID to the first argument of ",(0,a.kt)("a",{parentName:"li",href:"../../../api/classes/FrostApi#findone"},"FrostApi.findOne")),(0,a.kt)("li",{parentName:"ul"},"The second argument is an ",(0,a.kt)("a",{parentName:"li",href:"#include"},"Include")," Array")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"let user = await userApi.findOne('-N80Y3gwS6TLcTC6Q-vF',['profile','posts'])\n\n// to get profile \nlet userProfile = user.profile?.()\nlet userPosts = user.posts?.()\n\n// to get a flat object\nlet data = user.flatten()\n")),(0,a.kt)("h2",{id:"query-multiple"},"Query Multiple"),(0,a.kt)("p",null,"To preform a Query:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use the ",(0,a.kt)("a",{parentName:"li",href:"../../../api/classes/FrostApi#findmany"},"FrostApi.findMany")," function:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The first argument is an options object:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"include"),": pass the ",(0,a.kt)("a",{parentName:"li",href:"#include"},"Include")," array as a named parameter in the options Object"))),(0,a.kt)("li",{parentName:"ul"},"The second argument is a rest (spread) argument representing the firebase ",(0,a.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.queryconstraint"},"Query Constraints"),". These are exactly the parameters that should be passed to the ",(0,a.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.md#query"},"query")," firebase function",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"If no query constraints are passed then It will fetch all subnodes.")))))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Example 1: get all users\nlet users = await userApi.findMany(null)\n\n// Example 2: get all users with posts\nlet users = await userApi.findMany({ include: [\'posts\'] })\n\n//Example 3: get all users with the type "CUSTOMER" with their posts (for custom queries like this you should add an index manually to improve performance and reduce costs)\nlet users = await userApi.findMany({ include: [\'posts\'] },orderByChild("userType"),equalTo("CUSTOMER"))\n')))}u.isMDXComponent=!0}}]);