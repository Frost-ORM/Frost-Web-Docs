"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[6391],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,c=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return n?a.createElement(c,o(o({ref:t},p),{},{components:n})):a.createElement(c,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={"sidebar-position":2,description:"A guide on how to define nodes and the relations between them using Frost Schema Language",title:"Define Frost Schema"},o=void 0,s={unversionedId:"docs/guides/define-schema",id:"version-2.0.0/docs/guides/define-schema",title:"Define Frost Schema",description:"A guide on how to define nodes and the relations between them using Frost Schema Language",source:"@site/versioned_docs/version-2.0.0/docs/guides/define-schema.mdx",sourceDirName:"docs/guides",slug:"/docs/guides/define-schema",permalink:"/frost-web-docs/docs/guides/define-schema",draft:!1,tags:[],version:"2.0.0",frontMatter:{"sidebar-position":2,description:"A guide on how to define nodes and the relations between them using Frost Schema Language",title:"Define Frost Schema"},sidebar:"tutorialSidebar",previous:{title:"Database Indices",permalink:"/frost-web-docs/docs/guides/databse-indices"},next:{title:"Generate Frost App Implementation",permalink:"/frost-web-docs/docs/guides/generate-the-implementation"}},l={},d=[{value:"Define the models",id:"define-the-models",level:2},{value:"Node database path",id:"node-database-path",level:3},{value:"Defining the Relations",id:"defining-the-relations",level:3}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The schema for The Frost Client is defined using the Frost Schema Language (FSL),\na detailed guide on FSL can be found ",(0,r.kt)("a",{parentName:"p",href:"/frost-schema-language"},"here"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Please checkout ",(0,r.kt)("a",{parentName:"em",href:"/frost-schema-language#defining-types"},"Types Definitions"),"  and ",(0,r.kt)("a",{parentName:"em",href:"/frost-schema-language#defining-enums"},"Enums Definitions")," Sections in ",(0,r.kt)("a",{parentName:"em",href:"/frost-schema-language"},"FSL guide")))),(0,r.kt)("p",null,"Before Defining Models create ",(0,r.kt)("inlineCode",{parentName:"p"},"frost/schema.fsl")," file in your project directory, this will contain the schema."),(0,r.kt)("h2",{id:"define-the-models"},"Define the models"),(0,r.kt)("p",null,"The syntax for defining a model is very similar for defining a Type except for a few differences."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start the definition with ",(0,r.kt)("inlineCode",{parentName:"li"},"model")," keyword followed by the model name, As in lines ",(0,r.kt)("inlineCode",{parentName:"li"},"[1,10]"),"."),(0,r.kt)("li",{parentName:"ul"},"After the name of the model open two curly brackets which denotes the model block containing all the properties of that model"),(0,r.kt)("li",{parentName:"ul"},"define the properties of the model with this pattern ",(0,r.kt)("inlineCode",{parentName:"li"},"<property_name> <property_type>"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"checkout the allowed property types in the ",(0,r.kt)("a",{parentName:"li",href:"/frost-schema-language#allowed-data-types"},'"Allowed Data types"')," section in ",(0,r.kt)("a",{parentName:"li",href:"/frost-schema-language"},"FSL quick guide"),"."),(0,r.kt)("li",{parentName:"ul"},"properties could be optional by adding ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," to the type"),(0,r.kt)("li",{parentName:"ul"},"properties could be arrays by adding ",(0,r.kt)("inlineCode",{parentName:"li"},"[]")," to the type")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-prisma"},"model Student {\n\n  name String\n  email String\n\n  dateOfBirth Date \n\n}\n\nmodel Course {\n\n  level CourseLevel // a user-defined enum\n  name String\n  duration Int\n\n}\n")),(0,r.kt)("h3",{id:"node-database-path"},"Node database path"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," pragma is used to add any extra metadata for the node model.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," argument in the node pragma is used to determine the path of the node in the firebaseDB\nthat will contain the list of the model nodes. if the ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," pragma is not used the path will default to the same name of the model."),(0,r.kt)("p",null,"As you can see in ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Lines 4 and 19")),", the node pragma is used to define the paths for each model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"showLineNumbers",showLineNumbers:!0},"model Student {\n\n  name String\n  email String\n\n  // the students list will be stored in te following path in the database /students/<student_id>\n  @@node(path:'students') \n\n  dateOfBirth Date\n\n}\n\nmodel Course {\n\n  // the courses list will be stored in te following path in the database /courses/<course_id>\n  @@node(path:'courses') \n\n  level CourseLevel // a user-defined enum\n  name String\n  duration Int\n\n}\n")),(0,r.kt)("h3",{id:"defining-the-relations"},"Defining the Relations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Property definition statements in the model can accept the ",(0,r.kt)("a",{parentName:"li",href:"/frost-schema-language#relation-modifier"},(0,r.kt)("inlineCode",{parentName:"a"},"Relation")," modifier"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Other models can be used as data types in the model properties declaration, and actually you will have to use them if you want to decalre a relation between two models"))),(0,r.kt)("li",{parentName:"ul"},"To connect two models, simply:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Define a property on each model with the type of the other model you want to connect to."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"@Relation()")," after the property definition, as in Lines ",(0,r.kt)("inlineCode",{parentName:"li"},"[10,26]")," in the code block below."),(0,r.kt)("li",{parentName:"ul"},"The Type of the relation is determined by the Data type (wheter it's an array or not):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Many To Many")),": if both sides are arrays"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"One To Many")),": if one side is an array and the other is not."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"One To One")),": if both sides are not arrays"))),(0,r.kt)("li",{parentName:"ul"},"In the example below the relation is ",(0,r.kt)("inlineCode",{parentName:"li"},"Many-to-Many")," due to both sides being array types.")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can define multiple relations between the same models; by passing the name of the relation to the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," argument in the relation modifier,\nyou can find a detailed guide ",(0,r.kt)("a",{parentName:"p",href:"/frost-schema-language#relation-modifier"},"here"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"showLineNumbers",showLineNumbers:!0},"model Student {\n\n// the students list will be stored in te following path in the database /students/<student_id>\n  @@node(path:'students') \n\n  name String\n  email String \n  dateOfBirth Date \n\n  courses Courses[] @Relation() \n// this property is used to define a relation with the Course model,\n// since the data type is model. you will find a corresponding property in the Course model\n// Since properties on both side are array types then the relation is `many to many`\n\n}\n\nmodel Course {\n\n  // the courses list will be stored in te following path in the database /courses/<course_id>\n  @@node(path:'courses') \n\n  level CourseLevel // a user-defined enum\n  name String\n  duration Int\n\n  students Student[] @Relation()\n}\n")))}m.isMDXComponent=!0}}]);