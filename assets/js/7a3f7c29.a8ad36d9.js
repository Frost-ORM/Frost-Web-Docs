"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[8213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4},i="Delete",s={unversionedId:"docs/operations/delete",id:"version-2.0.0/docs/operations/delete",title:"Delete",description:"Node Removal",source:"@site/versioned_docs/version-2.0.0/docs/operations/delete.md",sourceDirName:"docs/operations",slug:"/docs/operations/delete",permalink:"/frost-web-docs/docs/operations/delete",draft:!1,tags:[],version:"2.0.0",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Update",permalink:"/frost-web-docs/docs/operations/update"},next:{title:"Multiple Location Write",permalink:"/frost-web-docs/docs/operations/multiple-location-write"}},l={},p=[{value:"Node Removal",id:"node-removal",level:2},{value:"Disconnect",id:"disconnect",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"delete"},"Delete"),(0,a.kt)("h2",{id:"node-removal"},"Node Removal"),(0,a.kt)("p",null,"To Simply delete an instance relations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the object (",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"or at least an object containing the id of the instance you want to delete, ie ",(0,a.kt)("inlineCode",{parentName:"em"},"{ id: '...' }"))),") you want to delete to ",(0,a.kt)("a",{parentName:"li",href:"../../api/classes/FrostDelegate#delete"},"FrostDelegate.delete()"),"."),(0,a.kt)("li",{parentName:"ul"},"The second parameter is ",(0,a.kt)("a",{parentName:"li",href:"../../api/types/DisconnectOptions"},"DisconnectOptions"),". It defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},'"all"'),", So it disconnects all relations unless you supply an empty map ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")," or a specific map you require. for more details Check the ",(0,a.kt)("a",{parentName:"li",href:"#disconnect"},"Disconnect")," Section")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/index.ts",title:"src/index.ts"},'import { User } from "@frost-orm/frost-web-client"\nimport { FrostApp } from "src/data/frost"\n\n...\n\nconst { id: userId } = (await FrostApp.user.delete(user))\n')),(0,a.kt)("h2",{id:"disconnect"},"Disconnect"),(0,a.kt)("p",null,"This is similar to ",(0,a.kt)("a",{parentName:"p",href:"./update#disconnect"},(0,a.kt)("inlineCode",{parentName:"a"},"Disconnect"))," in the ",(0,a.kt)("a",{parentName:"p",href:"./update"},(0,a.kt)("inlineCode",{parentName:"a"},"Update"))," Section. So you don't have to re-read it if you're already familiar with it. The only difference is that here it defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},'"all"')),(0,a.kt)("p",null,"To Specify the relations you want to disconnect along with the delete, all you have to do is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When you pass the instance to the delete function, pass a second parameter of the type ",(0,a.kt)("a",{parentName:"li",href:"../../api/types/DisconnectOptions"},"DisconnectOptions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The possible values for ",(0,a.kt)("a",{parentName:"li",href:"../../api/types/DisconnectOptions"},"DisconnectOptions")," are:"),(0,a.kt)("li",{parentName:"ul"},"The string ",(0,a.kt)("inlineCode",{parentName:"li"},'"all"'),", this will disconnect all relations"),(0,a.kt)("li",{parentName:"ul"},"A map between:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[property name with the relation you want to connect]")),(0,a.kt)("li",{parentName:"ul"},"and one of the following options:"),(0,a.kt)("li",{parentName:"ul"},"The string ",(0,a.kt)("inlineCode",{parentName:"li"},'"all"')," or the boolean ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to disconnect all connected instances in the selected relations (e.g: ",(0,a.kt)("inlineCode",{parentName:"li"},"{ posts: 'all', profile: true }"),")"),(0,a.kt)("li",{parentName:"ul"},"ID(s) of the instance(s) you want to disconnect (e.g: ",(0,a.kt)("inlineCode",{parentName:"li"},"{ posts: ['...','...',...], profile: \"...\" }"),")")))))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"If the property name in the ",(0,a.kt)("a",{parentName:"p",href:"../../api/types/DisconnectOptions"},"DisconnectOptions")," map is referring to a property with an array type (ie; many). then the value should be an array of the ids. otherwise (ie; One) then the value can be a single string."),(0,a.kt)("p",{parentName:"admonition"},"Please check out ",(0,a.kt)("a",{parentName:"p",href:"../../api/types/DisconnectOptions"},"DisconnectOptions"),", it contains more detailed examples.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Reminder:"))," The second parameter (disconnect options) defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},'"all"'))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Each model will have a lot of types generated automatically for it. ",(0,a.kt)("inlineCode",{parentName:"p"},"DisconnectOptions")," is One of these Types. These Type are named with the following pattern ",(0,a.kt)("inlineCode",{parentName:"p"},"{ModelName}Type"),", so for the example bellow the connect options type will be ",(0,a.kt)("inlineCode",{parentName:"p"},"UserDisconnectOptions"),".\nfor more details about these types checkout this ",(0,a.kt)("a",{parentName:"p",href:"/frost-web-docs/docs/extra/detailed-data-types"},"page"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/index.ts showLineNumbers",title:"src/index.ts",showLineNumbers:!0},'import { User, Profile, Post} from "@frost-orm/frost-web-client"\nimport { FrostApp } from "src/data/frost"\n\nconst user = {id:userId}\n\n//highlight-start\n// Example 1: this will disconnect all relations\nawait FrostApp.user.delete(user)\n//Or\nawait FrostApp.user.delete(user,"all")\n\n// Example 2: this will disconnect nothing\nawait FrostApp.user.delete(user,{})\n\n// Example 3: this will disconnect all posts and profiles\nawait FrostApp.user.delete(user,{ posts: "all", profile: true})\n\n// Example 4: this will disconnect the specific posts in the list and the single profile\nawait FrostApp.user.delete(user,{ posts: ["...","...",...], profile: "..."})\n//highlight-end\n\n')))}d.isMDXComponent=!0}}]);