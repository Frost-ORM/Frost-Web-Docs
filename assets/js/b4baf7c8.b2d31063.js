"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[448],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||s;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={toc_max_heading_level:4},i="Frost Web Annotations Example",o={unversionedId:"example",id:"version-1.0.3/example",title:"Frost Web Annotations Example",description:"- Clone the repo",source:"@site/versioned_docs/version-1.0.3/example.md",sourceDirName:".",slug:"/example",permalink:"/frost-web-docs/1.0.3/example",draft:!1,tags:[],version:"1.0.3",frontMatter:{toc_max_heading_level:4}},l={},p=[{value:"The Data Structure",id:"the-data-structure",level:2},{value:"Entities",id:"entities",level:3},{value:"Students",id:"students",level:4},{value:"Professors",id:"professors",level:4},{value:"Courses",id:"courses",level:4},{value:"Clubs",id:"clubs",level:4},{value:"Relations",id:"relations",level:3},{value:"One to One",id:"one-to-one",level:4},{value:"Club Supervisor (Professor &lt;--&gt; Club)",id:"club-supervisor-professor----club",level:5},{value:"One to Many",id:"one-to-many",level:4},{value:"Club Members (Club &lt;--&gt; Student)",id:"club-members-club----student",level:5},{value:"Professors&#39; Courses  (Professor &lt;--&gt; Course)",id:"professors-courses--professor----course",level:5},{value:"Many to Many",id:"many-to-many",level:4},{value:"Students&#39; Courses (Student &lt;--&gt; Course)",id:"students-courses-student----course",level:5},{value:"Brief Explanation on flow",id:"brief-explanation-on-flow",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Rendering",id:"rendering",level:3},{value:"Mock Data",id:"mock-data",level:2}],d={toc:p};function u(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"frost-web-annotations-example"},"Frost Web Annotations Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clone the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Frost-ORM/frost-v1-web-example"},"repo")),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"npm start")," to launch the website")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Please Don't forget to fill the firebaseConfig object in ",(0,r.kt)("inlineCode",{parentName:"em"},"src/database/frost.ts"))))),(0,r.kt)("h2",{id:"the-data-structure"},"The Data Structure"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Data Structure Diagram",src:n(1563).Z,width:"1920",height:"1080"})),(0,r.kt)("h3",{id:"entities"},"Entities"),(0,r.kt)("h4",{id:"students"},"Students"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The node path is defined inside the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/FrostEntity"},"FrostEntity")," decorator"),(0,r.kt)("li",{parentName:"ul"},"The node has 4 properties",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"year"),(0,r.kt)("li",{parentName:"ul"},"email"),(0,r.kt)("li",{parentName:"ul"},"birthday"))),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/DateSerializer"},"DateSerializer")," is used on the ",(0,r.kt)("inlineCode",{parentName:"li"},"birthday")," property"),(0,r.kt)("li",{parentName:"ul"},"The property ",(0,r.kt)("inlineCode",{parentName:"li"},"excludeExample")," is decorated with ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Exclude"},"Exclude"),", so it will not be serialized and inserted in the database.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/student.ts'",title:"'src/database/student.ts'"},'@FrostEntity({ collectionPath: "/testing/students" })\nexport class Student extends FrostObject<Student> {\n\n    name?: string;\n    year?: "FRESHMAN" | "SOPHOMORE" | "JUNIOR" | "SENIOR";\n    email?: string;\n\n    @Exclude()\n    excludeExample?: string;\n\n    @DateSerializer<Student>()\n    birthday?: Date;\n    ...\n    ...\n    .\n    .\n}\n\n@FrostNode({\n    entity: Student,\n})\nexport class StudentApi extends FrostApi<Student> {}\n\n')),(0,r.kt)("h4",{id:"professors"},"Professors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The node path is defined inside the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/FrostEntity"},"FrostEntity")," decorator"),(0,r.kt)("li",{parentName:"ul"},"The node has 4 properties",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"department"),(0,r.kt)("li",{parentName:"ul"},"email")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/professor.ts'",title:"'src/database/professor.ts'"},"@FrostEntity({collectionPath:'/testing/professor'})\nexport class Professor extends FrostObject<Professor>{\n\n    name?:string;\n    department?:string;\n    email?:string;\n\n    ...\n\n}\n\n@FrostNode({\n    entity: Professor,\n})\nexport class ProfessorApi extends FrostApi<Professor> {}\n\n")),(0,r.kt)("h4",{id:"courses"},"Courses"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The node path is defined inside the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/FrostEntity"},"FrostEntity")," decorator"),(0,r.kt)("li",{parentName:"ul"},"The node has 4 properties",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"department"),(0,r.kt)("li",{parentName:"ul"},"duration: (enum)"),(0,r.kt)("li",{parentName:"ul"},"difficultyLevel: (enum)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/course.ts'",title:"'src/database/course.ts'"},'\nexport enum Duration {\n  FULL_YEAR = 24,\n  FULL_SEMESTER = 12,\n  HALF_SEMESTER = 6,\n}\n\n@FrostEntity({collectionPath:\'/testing/courses\'})\nexport class Course extends FrostObject<Course> {\n\n    name?:string;\n    difficultyLevel?: "INTRODUCTORY" | "INTERMEDIATE" | "UPPER_INTERMEDIATE" | "ADVANCED_PLACEMENT";\n    duration?: Duration; // in weeks\n    department?: string;\n\n    ...\n\n}\n\n@FrostNode({\n    entity: Course,\n})\nexport class CourseApi extends FrostApi<Course> {}\n')),(0,r.kt)("h4",{id:"clubs"},"Clubs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The node path is defined inside the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/FrostEntity"},"FrostEntity")," decorator"),(0,r.kt)("li",{parentName:"ul"},"The node has 4 properties",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"roomId"),(0,r.kt)("li",{parentName:"ul"},"type: (enum)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/club.ts'",title:"'src/database/club.ts'"},'@FrostEntity({collectionPath:\'/testing/clubs\'})\nexport class Club extends FrostObject<Club> {\n\n    name?: string;\n\n    type?: "STEM" | "SPORTS" | "CREATIVE";\n\n    roomId?: string;\n\n    ...\n\n}\n\n@FrostNode({\n    entity: Club,\n})\nexport class ClubApi extends FrostApi<Club> {}\n\n')),(0,r.kt)("h3",{id:"relations"},"Relations"),(0,r.kt)("h4",{id:"one-to-one"},"One to One"),(0,r.kt)("h5",{id:"club-supervisor-professor----club"},"Club Supervisor (Professor <--\x3e Club)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each Club has one supervisor and each professor supervises only one club."),(0,r.kt)("li",{parentName:"ul"},"Relation Name: ",(0,r.kt)("inlineCode",{parentName:"li"},"CLUB_SUPERVISOR")," constant. should be passed to the decorator on both sides."),(0,r.kt)("li",{parentName:"ul"},"Relation Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"RelationTypes.ONE_TO_ONE"),". should be passed to the decorator at least on one side."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Professor"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"club")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> CLub")," is passed to the decorator and it's the same as the type of the property since it's \"One to One\""))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Club"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"supervisor")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Professor")," is passed to the decorator and it's the same as the type of the property since it's \"One to One\"")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/professor.ts'",title:"'src/database/professor.ts'"},"import {CLUB_SUPERVISOR} from \"./const.ts\"\n\n@FrostEntity({collectionPath:'/testing/professor'})\nexport class Professor extends FrostObject<Professor>{\n\n    ...\n\n    @Relation({ name: CLUB_SUPERVISOR, type: () => Club,relation:RelationTypes.ONE_TO_ONE })\n    club?: () => Club\n\n    ...\n\n}\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/club.ts'",title:"'src/database/club.ts'"},"import {CLUB_SUPERVISOR} from \"./const.ts\"\n\n@FrostEntity({collectionPath:'/testing/clubs'})\nexport class Club extends FrostObject<Club> {\n\n    ...\n\n    @Relation({ name: CLUB_SUPERVISOR, type: () => Professor,relation:RelationTypes.ONE_TO_ONE })\n    supervisor?: () => Professor\n\n    ...\n\n}\n\n")),(0,r.kt)("h4",{id:"one-to-many"},"One to Many"),(0,r.kt)("h5",{id:"club-members-club----student"},"Club Members (Club <--\x3e Student)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each Club has multiple students (members) and each student is allowed to participate in one club only"),(0,r.kt)("li",{parentName:"ul"},"Relation Name: ",(0,r.kt)("inlineCode",{parentName:"li"},"CLUB_STUDENTS")," constant. should be passed to the decorator on both sides."),(0,r.kt)("li",{parentName:"ul"},"Relation Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"RelationTypes.ONE_TO_MANY"),". should be passed to the decorator at least on one side."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Club"),": (Main)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"students")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Student")," is passed to the decorator while the type of the property is ",(0,r.kt)("inlineCode",{parentName:"li"},"()=> Student[]")," since the ",(0,r.kt)("inlineCode",{parentName:"li"},"Club")," is the main (one) side and the ",(0,r.kt)("inlineCode",{parentName:"li"},"Student")," are the many side."),(0,r.kt)("li",{parentName:"ul"},"Also, Since the Club is the Main side; then ",(0,r.kt)("inlineCode",{parentName:"li"},"master: true")," should be passed to the relation decorator."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Student"),": (Secondary)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"club")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Club")," is passed to the decorator and the type of the property is also ",(0,r.kt)("inlineCode",{parentName:"li"},"()=> Club")," since the ",(0,r.kt)("inlineCode",{parentName:"li"},"Student")," is the secondary (many) side and the ",(0,r.kt)("inlineCode",{parentName:"li"},"Club")," is main (one) side.")))))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Tip: ",(0,r.kt)("inlineCode",{parentName:"em"},"master: true")," should be in the Relation decorator that decorates the property with the Array type")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/club.ts'",title:"'src/database/club.ts'"},"import {CLUB_STUDENTS} from './consts.ts'\n\n@FrostEntity({collectionPath:'/testing/clubs'})\nexport class Club extends FrostObject<Club> {\n\n    ...\n\n    @Relation({ name: CLUB_STUDENTS, type: () => Student,relation: RelationTypes.ONE_TO_MANY, master: true })\n    students?: () => Student[]\n\n    ...\n}\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/student.ts'",title:"'src/database/student.ts'"},"import {CLUB_STUDENTS} from './consts.ts'\n\nexport class Student extends FrostObject<Student> {\n    \n    ...\n\n    @Relation({ name: CLUB_STUDENTS, type: () => Club, relation: RelationTypes.ONE_TO_MANY })\n    club?: () => Club;\n\n    ..\n\n}\n\n")),(0,r.kt)("h5",{id:"professors-courses--professor----course"},"Professors' Courses  (Professor <--\x3e Course)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each Course is taught by one professor but one professor teaches multiple courses."),(0,r.kt)("li",{parentName:"ul"},"Relation Name: ",(0,r.kt)("inlineCode",{parentName:"li"},"CLUB_STUDENTS")," constant. should be passed to the decorator on both sides."),(0,r.kt)("li",{parentName:"ul"},"Relation Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"RelationTypes.ONE_TO_MANY"),". should be passed to the decorator at least on one side."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Professor"),":(Main)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"courses")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Course")," is passed to the decorator while the type of the property is ",(0,r.kt)("inlineCode",{parentName:"li"},"()=> Course[]")," since the ",(0,r.kt)("inlineCode",{parentName:"li"},"Professor")," is the main (one) side and the ",(0,r.kt)("inlineCode",{parentName:"li"},"Course")," is the many side."),(0,r.kt)("li",{parentName:"ul"},"Also, Since the Club is the Main side; then ",(0,r.kt)("inlineCode",{parentName:"li"},"master: true")," should be passed to the relation decorator."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Course"),":(Secondary)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"professor")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Professor")," is passed to the decorator and the type of the property is also ",(0,r.kt)("inlineCode",{parentName:"li"},"()=> Professor")," since the ",(0,r.kt)("inlineCode",{parentName:"li"},"Course")," is the secondary (many) side and the ",(0,r.kt)("inlineCode",{parentName:"li"},"Professor")," is main (one) side.")))))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Tip: ",(0,r.kt)("inlineCode",{parentName:"em"},"master: true")," should be in the Relation decorator that decorates the property with the Array type")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/professor.ts'",title:"'src/database/professor.ts'"},"import {PROFESSOR_COURSES} from './consts.ts'\n\n@FrostEntity({collectionPath:'/testing/professor'})\nexport class Professor extends FrostObject<Professor>{\n\n    ...\n\n    @Relation({ name: PROFESSOR_COURSES , type: () => Course, relation:RelationTypes.ONE_TO_MANY, master:true})\n    courses?: () => Course[]\n\n    ...\n\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/course.ts'",title:"'src/database/course.ts'"},"import {PROFESSOR_COURSES} from './consts.ts'\n\nexport class Course extends FrostObject<Course> {\n\n    ...\n\n    @Relation(\n      {\n        name: PROFESSOR_COURSES,\n        type: () => Professor,\n        relation: RelationTypes.ONE_TO_MANY\n      }\n    )\n    professor?:() => Professor\n\n    ...\n\n}\n\n")),(0,r.kt)("h4",{id:"many-to-many"},"Many to Many"),(0,r.kt)("h5",{id:"students-courses-student----course"},"Students' Courses (Student <--\x3e Course)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each Course is audited by multiple students and each student audits multiple courses"),(0,r.kt)("li",{parentName:"ul"},"Relation Name: ",(0,r.kt)("inlineCode",{parentName:"li"},"STUDENT_COURSES")," constant. should be passed to the decorator on both sides."),(0,r.kt)("li",{parentName:"ul"},"Relation Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"RelationTypes.MANY_TO_MANY"),". should be passed to the decorator at least on one side."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Student"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"courses")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Course")," is passed to the decorator while the type of the property is ",(0,r.kt)("inlineCode",{parentName:"li"},"()=> Course[]"),' since it\'s "Many to Many"'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Course"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"students")," property is decorated with the ",(0,r.kt)("a",{parentName:"li",href:"./api/decorators/Relation"},"Relation")," decorator.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: ()=> Student")," is passed to the decorator while the type of the property is ",(0,r.kt)("inlineCode",{parentName:"li"},"()=> Student[]"),' since it\'s "Many to Many"')))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/student.ts'",title:"'src/database/student.ts'"},"import {STUDENT_COURSES} from './consts.ts'\n\nexport class Student extends FrostObject<Student> {\n    ...\n    \n    @Relation({\n        name: STUDENT_COURSES,\n        relation: RelationTypes.MANY_TO_MANY,\n        type: () => Course,\n    })\n    courses?: () => Course[];\n\n    ...\n}\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title='src/database/course.ts'",title:"'src/database/course.ts'"},"import {STUDENT_COURSES} from './consts.ts'\n\nexport class Course extends FrostObject<Course> {\n\n    ...\n\n    @Relation({ name: STUDENT_COURSES, type: () => Student })\n    students?: () => Student[]\n\n    ...\n\n}\n\n")),(0,r.kt)("h2",{id:"brief-explanation-on-flow"},"Brief Explanation on flow"),(0,r.kt)("h3",{id:"initialization"},"Initialization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The firebase configuration object is passed as the first argument to the ",(0,r.kt)("a",{parentName:"li",href:"./api/classes/Frost#initialize"},"Frost.initialize")," function."),(0,r.kt)("li",{parentName:"ul"},"The APIs are passed in a map as the second argument. ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"If the keys for the APIs are specified then you can access the APIs by the name you desire"))),(0,r.kt)("li",{parentName:"ul"},"The Function Returns a FrostApp Instance containing the APIs instances and the ",(0,r.kt)("inlineCode",{parentName:"li"},"firebaseApp")," instance."),(0,r.kt)("li",{parentName:"ul"},"On ",(0,r.kt)("inlineCode",{parentName:"li"},"Line 8"),": the firebase DB instance is retrieved by passing the ",(0,r.kt)("inlineCode",{parentName:"li"},"firebaseApp")," instance to the ",(0,r.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database#getdatabase"},"getDatabase()")," function. this instance will be used in the ",(0,r.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database#update"},"update()")," function in ",(0,r.kt)("a",{parentName:"li",href:"#mock-data"},"Mock Data"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=src/database/frost.ts",title:"src/database/frost.ts"},"export const FrostApp = Frost.initialize(firebaseConfig, {\n    CourseApi,\n    ClubApi,\n    ProfessorApi,\n    StudentApi,\n})\n\nexport const fireDB = getDatabase(FrostApp.firebaseApp)\n")),(0,r.kt)("h3",{id:"rendering"},"Rendering"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We have 3 lists:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Courses List"),(0,r.kt)("li",{parentName:"ul"},"Clubs List"),(0,r.kt)("li",{parentName:"ul"},"Students List"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each list will contain cards displaying the data for each item.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The students list is empty by default. Each card in the Clubs and Courses List will have ",(0,r.kt)("inlineCode",{parentName:"p"},"Students List")," Button. When this button is clicked; then the students for said course or club will be displayed in the list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The Rendering is managed by native DOM Manipulation and Custom Web Elements (Cards and Buttons from Paper UI).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We Have an observer for each list"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Clubs and Courses: Their observers are from the ",(0,r.kt)("a",{parentName:"li",href:"./api/classes/FrostApi#observemany"},"observeMany()")," function in their respective FrostApi."),(0,r.kt)("li",{parentName:"ul"},"Students: Their Observer is manually created form a RX Subject. and the Emitting of the data to this observer is managed through the other observers and the ",(0,r.kt)("inlineCode",{parentName:"li"},"onclick")," events.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=src/index.ts",title:"src/index.ts"},'\n...\n/*\n * When Clicked set the data in the selected variable\n * and Emit the new students list\n */\nfunction handleStudentsListClick(data: Club | Course){\n    selected = { type: data instanceof Club ? "club":"course", id: data.id };\n    studentsSubject.next(data.students?.() ?? []);\n}\n\n/*\n * Courses Observer \n * (No Constraints Passed , So it listens to all Courses) \n * included with each course is the connected students and professor\n */\nFrostApp.CourseApi.observeMany({\n    include: ["professor", "students"],\n}).subscribe((data) => {\n\n    /*\n     * When the data changes the coursesList div is modified\n     */\n    coursesList.replaceChildren(...data.map((course)=>courseCard(course,handleStudentsListClick)));\n\n\n    /*\n     * if the selected course changes then emit the new students list\n     * if empty then emit an empty student list\n     */\n    if (selected && selected.type === "course" ) {\n        if(!data.length) studentsSubject.next([])\n        else studentsSubject.next(data.find((value)=>value.id === selected?.id)?.students?.() ?? []);\n    }\n\n});\n\n/*\n * Clubs Observer \n * (No Constraints Passed , So it listens to all Clubs) \n * included with each club is the connected students and supervisor\n */\nFrostApp.ClubApi.observeMany({ include: ["supervisor", "students"] }).subscribe(\n    (data) => {\n        /*\n         * When the data changes the clubsList div is modified\n         */\n        clubsList.replaceChildren(...data.map((club)=>clubCard(club,handleStudentsListClick)));\n    \n\n        /*\n         * if the selected club changes then emit the new students list\n         * if empty then emit an empty student list\n         */\n        if (selected && selected.type === "club" ) {\n            if(!data.length) studentsSubject.next([])\n            else studentsSubject.next(data.find((value)=>value.id === selected?.id)?.students?.() ?? []);\n        }\n\n    },\n);\n\nstudentsSubject.subscribe((data) => {\n    /*\n     * When the data changes the studentsList div is modified\n     */\n    studentsList.replaceChildren(...data.map(studentCard));\n});\n\n\n...\n\n')),(0,r.kt)("h2",{id:"mock-data"},"Mock Data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Some Initial data is generated and Added to the database. (",(0,r.kt)("inlineCode",{parentName:"li"},"src/database/mock-data.ts")," contains the frost operations to add the data)"),(0,r.kt)("li",{parentName:"ul"},"Extra Students can be added. (mock data generated using Faker.Js)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=src/index.ts",title:"src/index.ts"},"\n/*\n * Sets The initial Mock Data (Clubs,Courses,Professors, Some Students)\n */\nmockBtn.onclick = () => {\n    setData();\n};\n/*\n * Adds Extra Mock Students Data\n */\nmockStudentsBtn.onclick = () => {\n    addStudents();\n};\n\n")))}u.isMDXComponent=!0},1563:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/data-structure-148ae452330b011ee7af1d904d4bab09.svg"}}]);