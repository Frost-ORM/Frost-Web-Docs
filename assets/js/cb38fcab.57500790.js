"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[9360],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>N});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=d(n),N=r,c=k["".concat(o,".").concat(N)]||k[N]||m[N]||i;return n?a.createElement(c,l(l({ref:t},s),{},{components:n})):a.createElement(c,l({ref:t},s))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},7773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},l=void 0,p={unversionedId:"api/classes/FrostApi",id:"version-1.0.3/api/classes/FrostApi",title:"FrostApi",description:"@frost-orm/frost-web / Exports / FrostApi",source:"@site/versioned_docs/version-1.0.3/api/classes/FrostApi.md",sourceDirName:"api/classes",slug:"/api/classes/FrostApi",permalink:"/frost-web-docs/1.0.3/api/classes/FrostApi",draft:!1,tags:[],version:"1.0.3",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Frost",permalink:"/frost-web-docs/1.0.3/api/classes/Frost"},next:{title:"FrostObject",permalink:"/frost-web-docs/1.0.3/api/classes/FrostObject"}},o={},d=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Table of contents",id:"table-of-contents",level:2},{value:"Methods",id:"methods",level:3},{value:"Methods",id:"methods-1",level:2},{value:"add",id:"add",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"delete",id:"delete",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"findMany",id:"findmany",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"findOne",id:"findone",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"getAddMap",id:"getaddmap",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"getDeleteMap",id:"getdeletemap",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"getRelated",id:"getrelated",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"getRelatedObservable",id:"getrelatedobservable",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"getUpdateMap",id:"getupdatemap",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"observeMany",id:"observemany",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"observeOne",id:"observeone",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"update",id:"update",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/modules"},"@frost-orm/frost-web")," / ",(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/modules"},"Exports")," / FrostApi"),(0,r.kt)("h1",{id:"class-frostapit"},"Class: FrostApi<T",">"),(0,r.kt)("h2",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/classes/FrostObject"},(0,r.kt)("inlineCode",{parentName:"a"},"FrostObject")))))),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#add"},"add")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#delete"},"delete")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#findmany"},"findMany")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#findone"},"findOne")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getaddmap"},"getAddMap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getdeletemap"},"getDeleteMap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getrelated"},"getRelated")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getrelatedobservable"},"getRelatedObservable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getupdatemap"},"getUpdateMap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#observemany"},"observeMany")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#observeone"},"observeOne")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#update"},"update"))),(0,r.kt)("h2",{id:"methods-1"},"Methods"),(0,r.kt)("h3",{id:"add"},"add"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"add"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"connect?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"inserts the new object with the new key from the push function or the key that was passed down with the object instance.\nalso connects the instance depending on the connect parameter"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Warning:"))," Changes to nested instances won't be applied")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object instance containing the new changes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"connect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),".")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"an object containing the update map and the new node id"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"delete"},"delete"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"delete"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"Removes the Object from the database and disconnects related objects depending on the disconnect parameter"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getdeletemap"},"getDeleteMap"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"))),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object instance to be deleted from the database (the object instance should be the one fetched from Frost or you can do it manually be constructing an instance)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"disconnect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"DisconnectOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"),".")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"findmany"},"findMany"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"findMany"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),", ...",(0,r.kt)("inlineCode",{parentName:"p"},"queryConstraints"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Just like the ",(0,r.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/js/database.md#query"},"query")," function in the firebaseDB,\nbut the first parameter is options for relations then is spread parameter like ",(0,r.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/js/database.md#query"},"query")),(0,r.kt)("p",null,"Just like ",(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#observemany"},"observeMany")," but with promises instead of observables."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#observemany"},"observeMany")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.queryconstraint"},"QueryConstraint"),".")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"options for the query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.include?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">","[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"...queryConstraints")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"QueryConstraint"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"https://firebase.google.com/docs/reference/js/database.queryconstraint"},"QueryConstraint"),".")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"the query results with related objects that were given in the include parameter"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"findone"},"findOne"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"findOne"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"include?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the object with the given id and containing the related instances with it (depending on the include parameter)"),(0,r.kt)("p",null,"Just like ",(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#observeone"},"observeOne")," but with promises instead of observables"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#observeone"},"observeOne")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object that you want to get the related objects from. (doesn't have to be an instantiated object could be the data map that was fetched manually )")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"include?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">","[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"the object instance of the given id with related objects that were given in the include parameter"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getaddmap"},"getAddMap"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getAddMap"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"connect?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"Returns a map containing the updates to the database that could be passed to firebaseDB update function.\nAlso the map contains the new object with the new key from the push function or the key that was passed down with the object instance.\nalso connects the instance depending on the connect parameter."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Warning:"))," Changes to nested instances won't be applied")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),"."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object instance containing the new changes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"connect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),".")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"an object containing the update map and the new node id"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getdeletemap"},"getDeleteMap"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getDeleteMap"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"Returns a map of the updates that could be passed to the updated function from firebaseDB\nif the map is applied it removes the Object from the database and disconnects related objects depending on the disconnect parameter"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions")),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object instance to be deleted from the database (the object instance should be the one fetched from Frost or you can do it manually be constructing an instance)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"disconnect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"DisconnectOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"))))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"an object containing the update map"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrelated"},"getRelated"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getRelated"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"include?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the object with the related instances with it (depending on the include parameter)\nUse this if you have an object instance without the related instances you want."),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getrelatedobservable"},"getRelatedObservable")," but with promises instead of observables"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/classes/FrostApi#getrelatedobservable"},"getRelatedObservable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"any")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object that you want to get the related objects from. (doesn't have to be an instantiated object could be the data map that was fetched manually )")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"include?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">","[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"an object instance with related objects that were given in the include parameter"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrelatedobservable"},"getRelatedObservable"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getRelatedObservable"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"include?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"listenToNestedChanges?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns an observable of the object with the related instances with it (depending on the include parameter)\nUse this if you have an object instance without the related instances you want."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},"ListenToNestedChanges"),".")),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"any")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object that you want to get the related objects from. (doesn't have to be an instantiated object could be the data map that was fetched manually )")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"include?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">","[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"listenToNestedChanges?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},(0,r.kt)("inlineCode",{parentName:"a"},"ListenToNestedChanges"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},"ListenToNestedChanges"),".")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"an Observable of the object instance with related objects that were given in the include parameter"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getupdatemap"},"getUpdateMap"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getUpdateMap"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"connect?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"Returns a map containing the updates that could be passed to firebaseDB update function"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Warning:"))," Changes to nested instances won't be applied")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"))),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object instance containing the new changes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"connect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"disconnect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"DisconnectOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"),".")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,r.kt)("p",null,"an object containing the update map"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"observemany"},"observeMany"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"observeMany"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"options"),", ...",(0,r.kt)("inlineCode",{parentName:"p"},"queryConstraints"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Just like the ",(0,r.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/js/database.md#query"},"query")," function in the firebaseDB,\nbut with observables, also the first parameter is options for the observable then is spread parameter like ",(0,r.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/js/database.md#query"},"query")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},"ListenToNestedChanges"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.queryconstraint"},"QueryConstraint"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Default Value"))),(0,r.kt)("p",null,"options.debounceDuration 500"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Default Value"))),(0,r.kt)("p",null,"options.listenToNestedChanges false"),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"options for the observable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.debounceDuration?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"in Milliseconds. incase multiple changes happen to the query in short time, this will prevent the observable to emit too many times")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.include?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">","[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options.listenToNestedChanges?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},(0,r.kt)("inlineCode",{parentName:"a"},"ListenToNestedChanges"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},"ListenToNestedChanges"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"...queryConstraints")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"QueryConstraint"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"https://firebase.google.com/docs/reference/js/database.queryconstraint"},"QueryConstraint"),".")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"an Observable of the query results with related objects that were given in the include parameter"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"observeone"},"observeOne"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"observeOne"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"include?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"listenToNestedChanges?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns an observable of the object with the given id and containing the related instances with it (depending on the include parameter)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},"ListenToNestedChanges"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Default Value"))),(0,r.kt)("p",null,"listenToNestedChanges false"),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object that you want to get the related objects from. (doesn't have to be an instantiated object could be the data map that was fetched manually )")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"include?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">","[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/Include"},"Include"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"listenToNestedChanges")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},(0,r.kt)("inlineCode",{parentName:"a"},"ListenToNestedChanges"))),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ListenToNestedChanges"},"ListenToNestedChanges"),".")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Observable"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"an Observable of the object instance of the given id with related objects that were given in the include parameter"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"update"},"update"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"update"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"connect?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"preforms the updates on the object instance and dis/connects relations depending on the options"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Warning:"))," Changes to nested instances won't be applied")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"))),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object instance containing the new changes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"connect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Exclude"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"KeysOfEntriesWithType"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Function"),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},'"serialize"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"getAllConnectedKeys"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"flatten"'),">",", ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/ConnectOptions"},"ConnectOptions"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"disconnect?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"DisconnectOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"see ",(0,r.kt)("a",{parentName:"td",href:"/frost-web-docs/1.0.3/api/types/DisconnectOptions"},"DisconnectOptions"),".")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"))}m.isMDXComponent=!0}}]);