"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[4027],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),c=i,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const l={toc_max_heading_level:4},r="Frost Web Codegen Example",s={unversionedId:"example",id:"version-2.0.0/example",title:"Frost Web Codegen Example",description:"- Clone the repo",source:"@site/versioned_docs/version-2.0.0/example.md",sourceDirName:".",slug:"/example",permalink:"/frost-web-docs/example",draft:!1,tags:[],version:"2.0.0",frontMatter:{toc_max_heading_level:4}},o={},u=[{value:"The Data Structure",id:"the-data-structure",level:2},{value:"Schema",id:"schema",level:3},{value:"Models",id:"models",level:3},{value:"Students",id:"students",level:4},{value:"Professors",id:"professors",level:4},{value:"Courses",id:"courses",level:4},{value:"Clubs",id:"clubs",level:4},{value:"Relations",id:"relations",level:3},{value:"One to One",id:"one-to-one",level:4},{value:"Club Supervisor (Professor &lt;--&gt; Club)",id:"club-supervisor-professor----club",level:5},{value:"One to Many",id:"one-to-many",level:4},{value:"Club Members (Club &lt;--&gt; Student)",id:"club-members-club----student",level:5},{value:"Professors&#39; Courses  (Professor &lt;--&gt; Course)",id:"professors-courses--professor----course",level:5},{value:"Many to Many",id:"many-to-many",level:4},{value:"Students&#39; Courses (Student &lt;--&gt; Course)",id:"students-courses-student----course",level:5},{value:"Brief Explanation on flow",id:"brief-explanation-on-flow",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Rendering",id:"rendering",level:3},{value:"Mock Data",id:"mock-data",level:2}],p={toc:u};function d(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"frost-web-codegen-example"},"Frost Web Codegen Example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clone the repo",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"VanillaJS: Native using Webpack. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Frost-ORM/frost-web-codegen-example-v1-native"},"Link to repo")),(0,i.kt)("li",{parentName:"ul"},"React (CRA). ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Frost-ORM/frost-web-codegen-example-v1-react"},"Link to repo")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"npm install")," then ",(0,i.kt)("inlineCode",{parentName:"li"},"npx frost generate")," or the shorthand ",(0,i.kt)("inlineCode",{parentName:"li"},"npx frost g")," . ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"you might not need to run the frost generate command depending on your npm configuration and version, you can run it either way just to be safe"))),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"npm start")," to launch the website")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Please Don't forget to fill the firebaseConfig object in ",(0,i.kt)("inlineCode",{parentName:"em"},"src/database/frost.ts")))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Also Don't forget to use getIndices function and add the rules to your firebaseDB")))),(0,i.kt)("h2",{id:"the-data-structure"},"The Data Structure"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Data Structure Diagram",src:n(1563).Z,width:"1920",height:"1080"})),(0,i.kt)("h3",{id:"schema"},"Schema"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The schema file in the example is not in default location. The location for the schema is specified inside package.json"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="$PROJECT_DIR/package.json"',title:'"$PROJECT_DIR/package.json"'},'{\n  ...\n\n  "frost":{\n    "schema":{\n      "path": "frostSchema.fsl"\n    }\n  }\n  ...\n}\n'))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For more details on Defining the schema, go to ",(0,i.kt)("a",{parentName:"p",href:"/frost-web-docs/docs/guides/define-schema"},"this page"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-fsl",metastring:"showLineNumbers title='$PROJECT_DIR/frostSchema.fsl'",showLineNumbers:!0,title:"'$PROJECT_DIR/frostSchema.fsl'"},'model Student {\n    @@node(path:"/testing/students")\n    name string\n    year  SchoolYear\n    birthday Date?\n    email string?\n\n    courses Course[] @Relation()\n    club Club @Relation()\n\n}\n\nenum SchoolYear {\n    FRESHMAN = "FRESHMAN"\n    SOPHOMORE = "SOPHOMORE"\n    JUNIOR = "JUNIOR"\n    SENIOR = "SENIOR"\n}\n\nmodel Professor {\n    @@node(path:"/testing/professors")\n    \n    name string\n    contactInfo ContactInfo?\n    department string\n    email string\n\n    courses Course[] @Relation()\n    club Club @Relation()\n}\n\ntype ContactInfo {\n    phone   string\n    email   string\n}\n\nmodel Course {\n    @@node(path:"/testing/courses")\n    \n    name string\n    difficultyLevel DifficultyLevel\n    duration Duration // in weeks\n    department string\n\n    students Student[] @Relation()\n    professor Professor @Relation()\n}\n\nenum DifficultyLevel {\n    INTRODUCTORY = "INTRODUCTORY"\n    INTERMEDIATE = "INTERMEDIATE"\n    UPPER_INTERMEDIATE = "UPPER_INTERMEDIATE"\n    ADVANCED_PLACEMENT = "ADVANCED_PLACEMENT"\n}\nenum Duration {\n  FULL_YEAR = 24\n  FULL_SEMESTER = 12\n  HALF_SEMESTER = 6\n}\n\nmodel Club {\n    @@node(path:"/testing/clubs")\n\n    name string\n    type ClubType\n    roomId string\n\n    members Student[] @Relation()\n    supervisor Professor @Relation()\n}\n\nenum ClubType {\n    STEM = "STEM"\n    SPORTS = "SPORTS"\n    CREATIVE = "CREATIVE"\n}\n')),(0,i.kt)("h3",{id:"models"},"Models"),(0,i.kt)("h4",{id:"students"},"Students"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The node path ","[",(0,i.kt)("inlineCode",{parentName:"li"},'"/testing/students"'),"]"," is defined using the ",(0,i.kt)("inlineCode",{parentName:"li"},"@@node")," pragma."),(0,i.kt)("li",{parentName:"ul"},"The Node Model has :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"4 base properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"name"),(0,i.kt)("li",{parentName:"ul"},"year",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"SchoolYear")," is User defined Enum. "))),(0,i.kt)("li",{parentName:"ul"},"email"),(0,i.kt)("li",{parentName:"ul"},"birthday"))),(0,i.kt)("li",{parentName:"ul"},"2 relational properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"courses: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Course")," Model"),(0,i.kt)("li",{parentName:"ul"},"club: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Club")," Model")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},'model Student {\n    @@node(path:"/testing/students")\n    name string\n    year  SchoolYear\n    birthday Date?\n    email string?\n\n    courses Course[] @Relation()\n    club Club @Relation()\n\n}\n\nenum SchoolYear {\n    FRESHMAN = "FRESHMAN"\n    SOPHOMORE = "SOPHOMORE"\n    JUNIOR = "JUNIOR"\n    SENIOR = "SENIOR"\n}\n\n\n')),(0,i.kt)("h4",{id:"professors"},"Professors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The node path ","[",(0,i.kt)("inlineCode",{parentName:"li"},'"/testing/professors"'),"]"," is defined using the ",(0,i.kt)("inlineCode",{parentName:"li"},"@@node")," pragma."),(0,i.kt)("li",{parentName:"ul"},"The Node Model has :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"4 base properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"name"),(0,i.kt)("li",{parentName:"ul"},"contactInfo",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"ContactInfo")," is User defined Type. "))),(0,i.kt)("li",{parentName:"ul"},"department"),(0,i.kt)("li",{parentName:"ul"},"email"))),(0,i.kt)("li",{parentName:"ul"},"2 relational properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"courses: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Course")," Model"),(0,i.kt)("li",{parentName:"ul"},"club: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Club")," Model")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},'model Professor {\n    @@node(path:"/testing/professors")\n    \n    name string\n    contactInfo ContactInfo?\n    department string\n    email string\n\n    courses Course[] @Relation()\n    club Club @Relation()\n}\n\ntype ContactInfo {\n    phone   string\n    email   string\n}\n')),(0,i.kt)("h4",{id:"courses"},"Courses"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The node path ","[",(0,i.kt)("inlineCode",{parentName:"li"},'"/testing/courses"'),"]"," is defined using the ",(0,i.kt)("inlineCode",{parentName:"li"},"@@node")," pragma."),(0,i.kt)("li",{parentName:"ul"},"The Node Model has :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"4 base properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"name"),(0,i.kt)("li",{parentName:"ul"},"department"),(0,i.kt)("li",{parentName:"ul"},"duration:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"Duration")," is User defined Enum."))),(0,i.kt)("li",{parentName:"ul"},"difficultyLevel:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"DifficultyLevel")," is User defined Enum."))))),(0,i.kt)("li",{parentName:"ul"},"2 relational properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"students: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Student")," Model"),(0,i.kt)("li",{parentName:"ul"},"professor: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Professor")," Model")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},'model Course {\n    @@node(path:"/testing/courses")\n    \n    name string\n    difficultyLevel DifficultyLevel\n    duration Duration \n    department string\n\n    students Student[] @Relation()\n    professor Professor @Relation()\n}\n\nenum DifficultyLevel {\n    INTRODUCTORY = "INTRODUCTORY"\n    INTERMEDIATE = "INTERMEDIATE"\n    UPPER_INTERMEDIATE = "UPPER_INTERMEDIATE"\n    ADVANCED_PLACEMENT = "ADVANCED_PLACEMENT"\n}\nenum Duration { // in weeks\n  FULL_YEAR = 24\n  FULL_SEMESTER = 12\n  HALF_SEMESTER = 6\n}\n')),(0,i.kt)("h4",{id:"clubs"},"Clubs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The node path ","[",(0,i.kt)("inlineCode",{parentName:"li"},'"/testing/clubs"'),"]"," is defined using the ",(0,i.kt)("inlineCode",{parentName:"li"},"@@node")," pragma."),(0,i.kt)("li",{parentName:"ul"},"The Node Model has :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"4 base properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"name"),(0,i.kt)("li",{parentName:"ul"},"roomId"),(0,i.kt)("li",{parentName:"ul"},"type:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"ClubType")," is User defined Enum."))))),(0,i.kt)("li",{parentName:"ul"},"2 relational properties",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"members: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Student")," Model"),(0,i.kt)("li",{parentName:"ul"},"supervisor: denotes a relation with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Professor")," Model")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},'model Club {\n    @@node(path:"/testing/clubs")\n\n    name string\n    type ClubType\n    roomId string\n\n    members Student[] @Relation()\n    supervisor Professor @Relation()\n}\n\nenum ClubType {\n    STEM = "STEM"\n    SPORTS = "SPORTS"\n    CREATIVE = "CREATIVE"\n}\n')),(0,i.kt)("h3",{id:"relations"},"Relations"),(0,i.kt)("h4",{id:"one-to-one"},"One to One"),(0,i.kt)("h5",{id:"club-supervisor-professor----club"},"Club Supervisor (Professor <--\x3e Club)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each Club has one supervisor and each professor supervises only one club."),(0,i.kt)("li",{parentName:"ul"},"Relation Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"RelationTypes.ONE_TO_ONE"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Professor")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"club")," property is single instance (ie; not array) and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Club")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"supervisor")," property is single instance (ie; not array) and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},"You can determine that the relation is one-to-one by looking at the relational properties on each side. In this case the properties ","[",(0,i.kt)("inlineCode",{parentName:"li"},"club"),",",(0,i.kt)("inlineCode",{parentName:"li"},"supervisor"),"]"," are both not arrays so it's a ",(0,i.kt)("inlineCode",{parentName:"li"},"One to One")," Relation.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},"\nmodel Professor {\n    ...\n    club Club @Relation()\n    ...\n}\n\n\nmodel Club {\n    ...\n    supervisor Professor @Relation()\n    ...\n}\n\n")),(0,i.kt)("h4",{id:"one-to-many"},"One to Many"),(0,i.kt)("h5",{id:"club-members-club----student"},"Club Members (Club <--\x3e Student)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each Club has multiple students (members) and each student is allowed to participate in one club only"),(0,i.kt)("li",{parentName:"ul"},"Relation Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"RelationTypes.ONE_TO_MANY"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Club")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"members")," property is an array type and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Student")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"club")," property is single instance (ie; not array) and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},"You can determine that the relation is One-to-Many by looking at the relational properties on each side. In this case, the ",(0,i.kt)("inlineCode",{parentName:"li"},"members")," property on ",(0,i.kt)("strong",{parentName:"li"},"Club")," Model is any array, and the ",(0,i.kt)("inlineCode",{parentName:"li"},"club")," property on the ",(0,i.kt)("strong",{parentName:"li"},"Student")," model is not an array. So it's a ",(0,i.kt)("inlineCode",{parentName:"li"},"One to Many")," Relation.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},"\nmodel Student {\n    ...\n    club Club @Relation()\n    ...\n}\n\nmodel Club {\n    ...\n    members Student[] @Relation()\n    ...\n}\n\n")),(0,i.kt)("h5",{id:"professors-courses--professor----course"},"Professors' Courses  (Professor <--\x3e Course)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each Course is taught by one professor but one professor teaches multiple courses."),(0,i.kt)("li",{parentName:"ul"},"Relation Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"RelationTypes.ONE_TO_MANY"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Professor")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"courses")," property is an array type and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Course")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"professor")," property is single instance (ie; not array) and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},"You can determine that the relation is One-to-Many by looking at the relational properties on each side. In this case, the ",(0,i.kt)("inlineCode",{parentName:"li"},"courses")," property on ",(0,i.kt)("strong",{parentName:"li"},"Professor")," Model is any array, and the ",(0,i.kt)("inlineCode",{parentName:"li"},"professor")," property on the ",(0,i.kt)("strong",{parentName:"li"},"Course")," model is not an array. So it's a ",(0,i.kt)("inlineCode",{parentName:"li"},"One to Many")," Relation.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},"model Course {\n    ...\n    professor Professor @Relation()\n    ...\n}\n\nmodel Professor {\n    ...\n    courses Course[] @Relation()\n    ...\n}\n\n\n")),(0,i.kt)("h4",{id:"many-to-many"},"Many to Many"),(0,i.kt)("h5",{id:"students-courses-student----course"},"Students' Courses (Student <--\x3e Course)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each Course is audited by multiple students and each student audits multiple courses"),(0,i.kt)("li",{parentName:"ul"},"Relation Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"RelationTypes.MANY_TO_MANY"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Student")," Model:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"courses")," property is an array type and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Course")," Model :",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"students")," property is an array type and has ",(0,i.kt)("inlineCode",{parentName:"li"},"@Relation")," modifier"))),(0,i.kt)("li",{parentName:"ul"},"You can determine that the relation is Many-to-Many by looking at the relational properties on each side. In this case the properties ","[",(0,i.kt)("inlineCode",{parentName:"li"},"students"),",",(0,i.kt)("inlineCode",{parentName:"li"},"courses"),"]"," are both arrays so it's a ",(0,i.kt)("inlineCode",{parentName:"li"},"Many to Many")," Relation.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},"model Student {\n    ...\n    courses Course[] @Relation()\n    ...\n\n}\n\nmodel Course {\n    ...\n    students Student[] @Relation()\n    ...\n}\n\n")),(0,i.kt)("h2",{id:"brief-explanation-on-flow"},"Brief Explanation on flow"),(0,i.kt)("h3",{id:"initialization"},"Initialization"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The firebase configuration object is passed as the first argument to the ",(0,i.kt)("a",{parentName:"li",href:"./api/classes/Frost#initialize"},"Frost.initialize")," function."),(0,i.kt)("li",{parentName:"ul"},"The Function Returns a FrostApp Instance containing the Delegates instances for each model, the ",(0,i.kt)("inlineCode",{parentName:"li"},"firebaseApp")," instance, and the ",(0,i.kt)("inlineCode",{parentName:"li"},"firebaseDB")," instance (SDK 9)."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.database.md#database_class"},(0,i.kt)("inlineCode",{parentName:"a"},"firebaseDB")," instance")," will be used in the ",(0,i.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database#update"},"update()")," function in ",(0,i.kt)("a",{parentName:"li",href:"#mock-data"},"Mock Data"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=src/database/frost.ts",title:"src/database/frost.ts"},"export const FrostApp = Frost.initialize(firebaseConfig)\n")),(0,i.kt)("h3",{id:"rendering"},"Rendering"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We have 3 lists:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Courses List"),(0,i.kt)("li",{parentName:"ul"},"Clubs List"),(0,i.kt)("li",{parentName:"ul"},"Students List"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Each list will contain cards displaying the data for each item.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The students list is empty by default. Each card in the Clubs and Courses List will have ",(0,i.kt)("inlineCode",{parentName:"p"},"Students List")," Button. When this button is clicked; then the students for said course or club will be displayed in the list.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Rendering is managed by native DOM Manipulation and Custom Web Elements (Cards and Buttons from Ionic UI).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We Have an observer for each list"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Clubs and Courses: Their observers are from the ",(0,i.kt)("a",{parentName:"li",href:"./api/classes/FrostDelegate#observemany"},"observeMany()")," function in their respective FrostDelegate."),(0,i.kt)("li",{parentName:"ul"},"Students: Their Observer is manually created form a RX Subject. and the Emitting of the data to this observer is managed through the other observers and the ",(0,i.kt)("inlineCode",{parentName:"li"},"onclick")," events.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=src/index.ts",title:"src/index.ts"},'\n...\n/*\n * When Clicked set the data in the selected variable\n * and Emit the new students list\n */\nfunction handleStudentsListClick(data: ClubTypes["FullModel"] | CourseTypes["FullModel"]){\n    selected = { type: ClubPredicate(data) ? "club":"course", id: data.id };\n    studentsSubject.next(Object.values(( ClubPredicate(data)? data.members : data.students )?? []) as any);\n}\n\n/*\n * Courses Observer \n * (No Constraints Passed , So it listens to all Courses) \n * included with each course is the connected students and professor\n */\nFrostApp.course.observeMany({\n  include: {"professor":true, "students":true},\n}).subscribe((data) => {\n  console.log({data})\n  /*\n   * When the data changes the coursesList div is modified\n   */\n  coursesList.replaceChildren(...Object.values(data).map((course)=>courseCard(course,handleStudentsListClick)));\n\n\n  /*\n   * if the selected course changes then emit the new students list\n   * if empty then emit an empty student list\n   */\n  if (selected && selected.type === "course" ) {\n      if(!Object.values(data).length) studentsSubject.next([])\n      else studentsSubject.next(Object.values(data[selected?.id]?.students ?? [] as any));\n  }\n\n});\n\n/*\n* Clubs Observer \n* (No Constraints Passed , So it listens to all Clubs) \n* included with each club is the connected students and supervisor\n*/\nFrostApp.club.observeMany({ include: {"supervisor":true, "members":true } }).subscribe(\n  (data) => {\n      /*\n       * When the data changes the clubsList div is modified\n       */\n      clubsList.replaceChildren(...Object.values(data).map((club)=>clubCard(club,handleStudentsListClick)));\n  \n\n      /*\n       * if the selected club changes then emit the new students list\n       * if empty then emit an empty student list\n       */\n      if (selected && selected.type === "club" ) {\n          if(!Object.values(data).length) studentsSubject.next([])\n          else studentsSubject.next(Object.values(data[selected?.id]?.members ?? [] as any));\n      }\n\n  },\n);\n\nstudentsSubject.subscribe((data) => {\n  /*\n   * When the data changes the studentsList div is modified\n   */\n  studentsList.replaceChildren(...data.map(studentCard));\n});\n\n\n...\n\n')),(0,i.kt)("h2",{id:"mock-data"},"Mock Data"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Some Initial data is generated and Added to the database. (",(0,i.kt)("inlineCode",{parentName:"li"},"src/database/mock-data.ts")," contains the frost operations to add the data)"),(0,i.kt)("li",{parentName:"ul"},"Extra Students can be added. (mock data generated using Faker.Js)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=src/index.ts",title:"src/index.ts"},"\n/*\n * Sets The initial Mock Data (Clubs,Courses,Professors, Some Students)\n */\nmockBtn.onclick = () => {\n    setData();\n};\n/*\n * Adds Extra Mock Students Data\n */\nmockStudentsBtn.onclick = () => {\n    addStudents();\n};\n\n")))}d.isMDXComponent=!0},1563:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/data-structure-148ae452330b011ee7af1d904d4bab09.svg"}}]);