"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[3417],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="Read Data Once",s={unversionedId:"docs/operations/read/once",id:"version-2.0.0/docs/operations/read/once",title:"Read Data Once",description:"IncludeOptions",source:"@site/versioned_docs/version-2.0.0/docs/operations/read/once.md",sourceDirName:"docs/operations/read",slug:"/docs/operations/read/once",permalink:"/frost-web-docs/docs/operations/read/once",draft:!1,tags:[],version:"2.0.0",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Read",permalink:"/frost-web-docs/category/read"},next:{title:"Listen to changes",permalink:"/frost-web-docs/docs/operations/read/listen-to-changes"}},l={},p=[{value:"IncludeOptions",id:"includeoptions",level:2},{value:"Fetch One",id:"fetch-one",level:2},{value:"Fetch Multiple",id:"fetch-multiple",level:2},{value:"Query Many",id:"query-many",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"read-data-once"},"Read Data Once"),(0,r.kt)("h2",{id:"includeoptions"},"IncludeOptions"),(0,r.kt)("p",null,"Since Frost Focuses on simplifying the relations, it provides the option to fetch related instances along with the instance you originally want to fetch.\nThis were the ",(0,r.kt)("a",{parentName:"p",href:"../../../api/types/IncludeOptions"},"IncludeOptions")," Parameter comes in."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../../../api/types/IncludeOptions"},"IncludeOptions")," Parameter is a map of the properties names that you want to fetch and the boolean indicating wether or not to include them."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"you don't have to set the properties you don't want to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," is considered ",(0,r.kt)("inlineCode",{parentName:"p"},"false"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// for example when fetching a user with it\'s profile and posts the IncludeOptions map would be\n{\n  "profile":true,\n  "posts":true\n}\n')),(0,r.kt)("h2",{id:"fetch-one"},"Fetch One"),(0,r.kt)("p",null,"To Fetch a single instance:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pass the instance ID to the first argument of ",(0,r.kt)("a",{parentName:"li",href:"../../../api/classes/FrostDelegate#findone"},"FrostDelegate.findOne")),(0,r.kt)("li",{parentName:"ul"},"The second argument is an ",(0,r.kt)("a",{parentName:"li",href:"#includeoptions"},"IncludeOptions")," map")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'let user = await FrostApp.user.findOne(\'-N80Y3gwS6TLcTC6Q-vF\',{"profile":true,"posts":true})\n\n// to access profile \nlet userProfile = user.profile\n// to access posts \nlet userPosts = user.posts\n\n')),(0,r.kt)("h2",{id:"fetch-multiple"},"Fetch Multiple"),(0,r.kt)("p",null,"To Fetch a set of instances:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pass the nodes IDs you want to fetch to the first argument of ",(0,r.kt)("a",{parentName:"li",href:"../../../api/classes/FrostDelegate#findmultiple"},"FrostDelegate.findMultiple")),(0,r.kt)("li",{parentName:"ul"},"The second argument is an options Object, with the following parameters:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"include"),": pass the ",(0,r.kt)("a",{parentName:"li",href:"#includeoptions"},"IncludeOptions")," map as a named parameter in the options Object"))),(0,r.kt)("li",{parentName:"ul"},"Returns a map ",(0,r.kt)("inlineCode",{parentName:"li"},"{[node_key]: node_value}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let users = await FrostApp.user.findMultiple(\n                                  ['-N80Y3gwS6TLcTC6Q-vF','-N81Y3gwS6TLcTC1K-cB','-N82Y3gwS6TLcTC5Q-rA'],\n                                  { include:{\"profile\":true,\"posts\":true }}\n                                )\n\n\n")),(0,r.kt)("h2",{id:"query-many"},"Query Many"),(0,r.kt)("p",null,"To preform a Query:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("a",{parentName:"li",href:"../../../api/classes/FrostDelegate#findmany"},"FrostDelegate.findMany")," function:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The first argument is an options object:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"include"),": pass the ",(0,r.kt)("a",{parentName:"li",href:"#includeoptions"},"IncludeOptions")," map as a named parameter in the options Object"))),(0,r.kt)("li",{parentName:"ul"},"The second argument is a rest (spread) argument representing the firebase ",(0,r.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.queryconstraint"},"Query Constraints"),". These are exactly the parameters that should be passed to the ",(0,r.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/reference/js/database.md#query"},"query")," firebase function",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"If no query constraints are passed then It will fetch all subnodes."))))))),(0,r.kt)("li",{parentName:"ul"},"Returns a map ",(0,r.kt)("inlineCode",{parentName:"li"},"{[node_key]: node_value}")),(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Example 1: get all users\nlet users = await FrostApp.user.findMany(null)\n\n// Example 2: get all users with posts\nlet users = await FrostApp.user.findMany({ include: {\'posts\':true} })\n\n//Example 3: get all users with the type "CUSTOMER" with their posts (for custom queries like this you should add an index manually to improve performance and reduce costs)\nlet users = await FrostApp.user.findMany({ include: {\'posts\':true}  },orderByChild("userType"),equalTo("CUSTOMER"))\n')))}c.isMDXComponent=!0}}]);