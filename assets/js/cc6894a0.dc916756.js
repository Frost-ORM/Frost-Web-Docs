"use strict";(self.webpackChunkfrost_web_doc=self.webpackChunkfrost_web_doc||[]).push([[3238],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,title:"Write (Add/Insert)"},i=void 0,s={unversionedId:"docs/operations/write",id:"version-2.0.0/docs/operations/write",title:"Write (Add/Insert)",description:"This section will describe FrostDelegate.add() function. This Function is used to push a new instance of the entity to the entity list and connect it with other entities depending on the relations.",source:"@site/versioned_docs/version-2.0.0/docs/operations/write.md",sourceDirName:"docs/operations",slug:"/docs/operations/write",permalink:"/frost-web-docs/docs/operations/write",draft:!1,tags:[],version:"2.0.0",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Write (Add/Insert)"},sidebar:"tutorialSidebar",previous:{title:"Listen to changes",permalink:"/frost-web-docs/docs/operations/read/listen-to-changes"},next:{title:"Update",permalink:"/frost-web-docs/docs/operations/update"}},p={},l=[{value:"Regular Data Insert",id:"regular-data-insert",level:2},{value:"Connect",id:"connect",level:2}],c={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section will describe ",(0,o.kt)("a",{parentName:"p",href:"../../api/classes/FrostDelegate#add"},"FrostDelegate.add()")," function. This Function is used to push a new instance of the entity to the entity list and connect it with other entities depending on the relations."),(0,o.kt)("h2",{id:"regular-data-insert"},"Regular Data Insert"),(0,o.kt)("p",null,"To Simply Add a new instance, all you have to do is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As in ",(0,o.kt)("inlineCode",{parentName:"li"},"line 6")," Pass object containing the Model data to the ",(0,o.kt)("inlineCode",{parentName:"li"},"add")," function in the corresponding Delegate from the FrostApp instance (in this case the FrostApp has the shape ",(0,o.kt)("inlineCode",{parentName:"li"},"{firebaseApp:FirebaseApp, firebaseDB:Database, user:UserDelegate, profile:ProfileDelegate}"),")"),(0,o.kt)("li",{parentName:"ul"},"The add function returns an object with the shape ",(0,o.kt)("inlineCode",{parentName:"li"},"{id:string}"),", the ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," is the id of the newly created instance")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"if you want the instance to have a specific id, then set it in the object instance before passing it to the add function. otherwise the id will be the id returned from the firebase ",(0,o.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/js/database#push"},(0,o.kt)("inlineCode",{parentName:"a"},"push"))," function.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/index.ts showLineNumbers",title:"src/index.ts",showLineNumbers:!0},'import { FrostApp } from "src/data/frost"\nimport { User } from "@frost-orm/frost-web-client"\n\nconst user: User = {...}\n\nconst { id } = (await FrostApp.user.add(user))\n')),(0,o.kt)("h2",{id:"connect"},"Connect"),(0,o.kt)("p",null,"To Simply Add a new instance and also connect it to other instances based on the relations, all you have to do is: (We'll continue with the same example from above)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As in ",(0,o.kt)("inlineCode",{parentName:"li"},"line 10"),", when you pass the data to the add function, you can also pass a second parameter of the type ",(0,o.kt)("a",{parentName:"li",href:"../../api/types/ConnectOptions"},"ConnectOptions"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The connect option is basically a map between the ",(0,o.kt)("br",null)," ",(0,o.kt)("inlineCode",{parentName:"li"},"{ [property name with the relation you want to connect] : (id of the instance(s) you want to connect) }"),".")))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Each model will have a lot of types generated automatically for it. ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectOptions")," is One of these Types. These Type are named with the following pattern ",(0,o.kt)("inlineCode",{parentName:"p"},"{ModelName}Type"),", so for the example bellow the connect options type will be ",(0,o.kt)("inlineCode",{parentName:"p"},"UserConnectOptions"),".\nfor more details about these types checkout this ",(0,o.kt)("a",{parentName:"p",href:"/frost-web-docs/docs/extra/detailed-data-types"},"page"))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If the property name in the ",(0,o.kt)("a",{parentName:"p",href:"../../api/types/ConnectOptions"},"ConnectOptions")," map is referring to a property with an array type (ie; many). then the value should be an array of the ids. otherwise (ie; One) then the value can be a single string.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"In the example below, we create and add the user, then we create the profile for the user and when we add it we pass the ",(0,o.kt)("inlineCode",{parentName:"em"},"userId")," in the ConnectOptions in the second parameter"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/index.ts showLineNumbers",title:"src/index.ts",showLineNumbers:!0},'import { User, Profile } from "@frost-orm/frost-web-client"\nimport { FrostApp } from "src/data/frost"\n\nconst userData: User = {...}\n\nconst { id: userId } = (await FrostApp.user.add(userData))\n\n//highlight-start\nconst profile: Profile = {...}\n\nconst {id:profileId} = await FrostApp.profile.add(profile,{\'user\':userId})\n//highlight-end\n')))}d.isMDXComponent=!0}}]);